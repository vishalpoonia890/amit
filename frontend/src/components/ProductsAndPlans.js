
import React, { useState, useEffect } from 'react';
import './ProductsAndPlans.css';
// Import all specific images

import axios from 'axios'; // Import axios
const API_BASE_URL = 'https://investmentpro-nu7s.onrender.com'; // Define API_BASE_URL




// Category descriptions
const categoryDescriptions = {
    'New': {
        title: "Explore Our Latest Investment Opportunities!",
        points: [
            "You acquire a share in our newly launched, high-potential ventures.",
            "Your funds are invested in diverse, cutting-edge projects with rapid growth potential.",
            "Profits from these successful early-stage ventures are distributed among investors.",
            "Witness the power of innovation as your investment grows with emerging markets."
        ]
    },
    'Solar Energy': {
        title: "Invest in a Brighter, Greener Future!",
        points: [
            "You purchase a plan, supporting the development of solar energy projects.",
            "Your money directly funds the installation and maintenance of solar farms.",
            "Profit is generated by selling the clean electricity produced by these panels to the grid.",
            "Returns are then redistributed among all investors, powering both your portfolio and the planet."
        ]
    },
    'Wind Mill': {
        title: "Harness the Power of Wind for Your Portfolio!",
        points: [
            "You invest in our wind energy plans, contributing to sustainable power generation.",
            "Your capital is used to build and operate state-of-the-art wind turbine farms.",
            "Revenue is earned by selling the renewable energy generated by the windmills.",
            "Profits are shared with all investors, making your money work with the wind."
        ]
    },
    'Crypto Mining': {
        title: "Mine Digital Gold with Confidence!",
        points: [
            "You acquire a mining plan, gaining access to our high-performance crypto mining operations.",
            "Your investment secures computational power (hash rate) in our advanced mining facilities.",
            "Profit is generated by successfully mining new cryptocurrencies and processing transactions.",
            "Returns from the mined digital assets are then redistributed among all investors."
        ]
    },
    'Seaport': {
        title: "Unlock Value from International Trade & Logistics!",
        points: [
            "You invest in a Seaport clearance plan, helping facilitate international cargo flow.",
            "Your funds are used to clear imported goods held at customs, covering duties and logistics.",
            "Profit is made from the successful clearance and subsequent sale or distribution of these valuable goods.",
            "Returns from the expedited trade are shared among all investors, connecting you to global commerce."
        ]
    }
};

// --- MOCK DATA FOR PRODUCTS WITH PRE-SALE ---
// NOTE: Sale start times are set in the future relative to the request time.
const mockPlans = {
    'New': [
        { id: 101, name: 'Quantum Leap Fund', price: 480, dailyIncome: 75, durationDays: 10, totalReturn: 750, saleStartTime: '2025-09-14T20:00:00',image: '../assets/Code.png' },
        { id: 102, name: 'Pioneer\'s Pack', price: 650, dailyIncome: 90, durationDays: 12, totalReturn: 1080, saleStartTime: '2025-09-13T10:00:00' ,image: '../assets/Code.png},
        { id: 103, name: 'Venture Catalyst', price: 800, dailyIncome: 110, durationDays: 15, totalReturn: 1650, saleStartTime: '2025-09-19T15:30:00',image: '../assets/Code.png },
        { id: 104, name: 'Growth Spark', price: 1000, dailyIncome: 130, durationDays: 15, totalReturn: 1950, saleStartTime: '2025-09-18T14:00:00',image: '../assets/Code.png },
        { id: 105, name: 'Innovation Drive', price: 1200, dailyIncome: 150, durationDays: 18, totalReturn: 2700, saleStartTime: '2025-09-15T09:00:00',image: '../assets/Code.png },
    ],
    'Solar Energy': [
        { id: 201, name: 'Sun Harvest 100', price: 1500, dailyIncome: 180, durationDays: 20, totalReturn: 3600 ,image: '../assets/Code.png},
        { id: 202, name: 'EcoGrid Builder', price: 2500, dailyIncome: 280, durationDays: 25, totalReturn: 7000 ,image: '../assets/Code.png},
        { id: 203, name: 'Radiant Returns', price: 3500, dailyIncome: 380, durationDays: 30, totalReturn: 11400 ,image: '../assets/Code.png},
        { id: 204, name: 'Photovoltaic Fund', price: 5000, dailyIncome: 520, durationDays: 35, totalReturn: 18200 ,image: '../assets/Code.png},
        { id: 205, name: 'Green Power Max', price: 7500, dailyIncome: 780, durationDays: 40, totalReturn: 31200 ,image: '../assets/Code.png},
    ],
    'Wind Mill': [
        { id: 301, name: 'AeroBlade Advantage', price: 10000, dailyIncome: 1100, durationDays: 45, totalReturn: 49500 ,image: '../assets/Code.png},
        { id: 302, name: 'Zephyr Yield', price: 15000, dailyIncome: 1600, durationDays: 45, totalReturn: 72000,image: '../assets/Code.png },
        { id: 303, name: 'Windfarm Wealth', price: 25000, dailyIncome: 2700, durationDays: 50, totalReturn: 135000 ,image: '../assets/Code.png},
        { id: 304, name: 'Turbine Trust', price: 35000, dailyIncome: 3800, durationDays: 50, totalReturn: 190000 ,image: '../assets/Code.png},
        { id: 305, name: 'Gale Force Fund', price: 45000, dailyIncome: 4900, durationDays: 55, totalReturn: 269500,image: '../assets/Code.png },
    ],
    'Crypto Mining': [
        { id: 401, name: 'Hash Rate Pro', price: 50000, dailyIncome: 5500, durationDays: 60, totalReturn: 330000 ,image: '../assets/Code.png},
        { id: 402, name: 'Block Reward Boost', price: 75000, dailyIncome: 8000, durationDays: 60, totalReturn: 480000 ,image: '../assets/Code.png},
        { id: 403, name: 'Digital Fortune Miner', price: 100000, dailyIncome: 11000, durationDays: 60, totalReturn: 660000 ,image: '../assets/Code.png},
        { id: 404, name: 'Blockchain Baron', price: 150000, dailyIncome: 17000, durationDays: 65, totalReturn: 1105000 ,image: '../assets/Code.png},
        { id: 405, name: 'Satoshi\'s Secret', price: 200000, dailyIncome: 23000, durationDays: 70, totalReturn: 1610000 ,image: '../assets/Code.png},
    ],
    'Seaport': [ // New Seaport category
        { id: 501, name: 'Cargo Clearance Basic', price: 800, dailyIncome: 100, durationDays: 10, totalReturn: 1000, saleStartTime: '2025-10-01T09:00:00',image: '../assets/Code.png },
        { id: 502, name: 'Logistics Link Pro', price: 1500, dailyIncome: 180, durationDays: 15, totalReturn: 2700 ,image: '../assets/Code.png},
        { id: 503, name: 'Customs Navigator', price: 2500, dailyIncome: 280, durationDays: 20, totalReturn: 5600 ,image: '../assets/Code.png},
        { id: 504, name: 'Global Trade Accelerator', price: 4000, dailyIncome: 450, durationDays: 25, totalReturn: 11250 ,image: '../assets/Code.png},
        { id: 505, name: 'Port Authority Platinum', price: 6000, dailyIncome: 650, durationDays: 30, totalReturn: 19500 ,image: '../assets/Code.png},
    ]
};

// --- Countdown Timer Component ---
const CountdownTimer = ({ targetDate }) => {
    const calculateTimeLeft = () => {
        const difference = +new Date(targetDate) - +new Date();
        let timeLeft = {};
        if (difference > 0) {
            timeLeft = {
                days: Math.floor(difference / (1000 * 60 * 60 * 24)),
                hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
                minutes: Math.floor((difference / 1000 / 60) % 60),
                seconds: Math.floor((difference / 1000) % 60)
            };
        }
        return timeLeft;
    };

    const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());

    useEffect(() => {
        const timer = setTimeout(() => {
            setTimeLeft(calculateTimeLeft());
        }, 1000);
        return () => clearTimeout(timer);
    });

    const timerComponents = Object.keys(timeLeft).map(interval => {
        if (!timeLeft[interval] && interval !== 'seconds' && timeLeft['days'] === 0) {
            return null;
        }
        return (
            <span key={interval} className="timer-segment">
                {String(timeLeft[interval]).padStart(2, '0')}
                <span className="timer-label">{interval[0]}</span>
            </span>
        );
    });

    return (
        <div className="countdown-timer">
            {timerComponents.length ? timerComponents : <span className="sale-live">Sale is Live!</span>}
        </div>
    );
};


function ProductsAndPlans({ token, onPlanPurchase }) {
    const [activeCategory, setActiveCategory] = useState('New');
    const [loading, setLoading] = useState(false);
    const [confirmingPlanId, setConfirmingPlanId] = useState(null);

    const handlePurchase = async (plan) => {
        setLoading(true);
        try {
            const response = await axios.post(`${API_BASE_URL}/api/purchase-plan`, {
                planId: plan.id,
                name: plan.name,
                price: plan.price,
                dailyIncome: plan.dailyIncome,
                durationDays: plan.durationDays,
                totalReturn: plan.totalReturn
            }, {
                headers: {
                    Authorization: `Bearer ${token}`
                }
            });
            console.log('Purchase successful:', response.data);
            onPlanPurchase(); // Call the callback from App.js to show notification and refresh data
        } catch (error) {
            console.error('Error purchasing plan:', error.response?.data?.error || error.message);
            // You might want to pass an error message back to App.js or show it here
            onPlanPurchase(error.response?.data?.error || 'Failed to purchase plan.'); // Pass error message
        } finally {
            setLoading(false);
            setConfirmingPlanId(null);
        }
    };

    const formatCurrency = (amount) => new Intl.NumberFormat("en-IN", { style: "currency", currency: "INR" }).format(amount);

    return (
        <div className="plans-page">
            <div className="plans-header">
                <h1>Investment Products</h1>
                <div className="category-tabs">
                    {Object.keys(mockPlans).map(category => (
                        <button
                            key={category}
                            className={`category-tab ${activeCategory === category ? 'active' : ''}`}
                            onClick={() => setActiveCategory(category)}
                        >
                            {category}
                        </button>
                    ))}
                </div>
            </div>

            <div className="category-description-section">
                <h2>{categoryDescriptions[activeCategory].title}</h2>
                <ul>
                    {categoryDescriptions[activeCategory].points.map((point, index) => (
                        <li key={index}>{point}</li>
                    ))}
                </ul>
            </div>

            <div className="plans-grid">
                {mockPlans[activeCategory].map((plan) => {
                    const isPreSale = plan.saleStartTime && new Date(plan.saleStartTime) > new Date();
                    return (
                        <div key={plan.id} className="plan-card">
                            <div className="plan-image-container">
                                <img src={categoryImages[activeCategory]} alt={plan.name} className="plan-image" />
                                {isPreSale && <div className="presale-badge">Pre-Sale</div>}
                            </div>
                            <div className="plan-card-body">
                                <h3>{plan.name}</h3>
                                {isPreSale && (
                                    <div className="presale-info">
                                        <p>Sale Starts In:</p>
                                        <CountdownTimer targetDate={plan.saleStartTime} />
                                    </div>
                                )}
                                <p className="price">Price: {formatCurrency(plan.price)}</p>
                                <div className="plan-details">
                                    <div><span>Daily Income:</span><strong>{formatCurrency(plan.dailyIncome)}</strong></div>
                                    <div><span>Term:</span><strong>{plan.durationDays} Days</strong></div>
                                    <div><span>Total Return:</span><strong>{formatCurrency(plan.totalReturn)}</strong></div>
                                </div>
                                {confirmingPlanId !== plan.id ? (
                                    <button
                                        className={`purchase-button ${isPreSale ? 'presale' : ''}`}
                                        onClick={() => setConfirmingPlanId(plan.id)}
                                        disabled={loading}
                                    >
                                        {isPreSale ? 'Pre-Order Now' : 'Invest Now'}
                                    </button>
                                ) : (
                                    <div className="confirmation-buttons">
                                        <button className="confirm-btn" onClick={() => handlePurchase(plan)} disabled={loading}>Confirm</button>
                                        <button className="cancel-btn" onClick={() => setConfirmingPlanId(null)} disabled={loading}>Cancel</button>
                                    </div>
                                )}
                            </div>
                        </div>
                    );
                })}
            </div>
        </div>
    );
}
export default ProductsAndPlans;
