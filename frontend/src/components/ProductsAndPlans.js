import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './ProductsAndPlans.css';

// --- Import ALL individual product images ---
import product_101_Image from '../assets/101.png';
import product_102_Image from '../assets/102.png';
import product_103_Image from '../assets/103.png';
import product_104_Image from '../assets/104.png';
import product_105_Image from '../assets/105.png';

import product_201_Image from '../assets/201.png';
import product_202_Image from '../assets/202.png';
import product_203_Image from '../assets/203.png';
import product_204_Image from '../assets/204.png';
import product_205_Image from '../assets/205.png';

import product_301_Image from '../assets/301.png';
import product_302_Image from '../assets/302.png';
import product_303_Image from '../assets/303.png';
import product_304_Image from '../assets/304.png';
import product_305_Image from '../assets/305.png';

import product_401_Image from '../assets/401.png';
import product_402_Image from '../assets/402.png';
import product_403_Image from '../assets/403.png';
import product_404_Image from '../assets/404.png';
import product_405_Image from '../assets/405.png';

import product_501_Image from '../assets/501.png';
import product_502_Image from '../assets/502.png';
import product_503_Image from '../assets/503.png';
import product_504_Image from '../assets/504.png';
import product_505_Image from '../assets/505.png';

const API_BASE_URL = 'https://investmentpro-nu7s.onrender.com';

const categoryDescriptions = {
    'New': {
        title: "Explore Our Latest Investment Opportunities!",
        points: [
            "You acquire a share in our newly launched, high-potential products.",
            "Your funds are invested in diverse, cutting-edge projects with rapid growth potential.",
            "Profits from these successful early-stage ventures are distributed among investors.",
            "Witness the power of innovation as your investment grows with emerging markets."
        ]
    },
    'Solar Energy': {
        title: "Invest in a Brighter, Greener Future!",
        points: [
            "You purchase a plan, supporting the development of solar energy projects.",
            "Your money directly funds the installation and maintenance of solar farms.",
            "Profit is generated by selling the clean electricity produced by these panels to the grid.",
            "Returns are then redistributed among all investors, powering both your portfolio and the planet."
        ]
    },
     'Wind Mill': {
        title: "Harness the Power of Wind for Your Portfolio!",
        points: [
            "You invest in our wind energy plans, contributing to sustainable power generation.",
            "Your capital is used to build and operate state-of-the-art wind turbine farms.",
            "Revenue is earned by selling the renewable energy generated by the windmills.",
            "Profits are shared with all investors, making your money work with the wind."
        ]
    },
    'Crypto Mining': {
        title: "Mine Digital Gold with Confidence!",
        points: [
            "You acquire a mining plan, gaining access to our high-performance crypto mining operations.",
            "Your investment secures computational power (hash rate) in our advanced mining facilities.",
            "Profit is generated by successfully mining new cryptocurrencies and processing transactions.",
            "Returns from the mined digital assets are then redistributed among all investors."
        ]
    },
    'Seaport': {
        title: "Unlock Value from International Trade & Logistics!",
        points: [
            "You invest in a Seaport clearance plan, helping facilitate international cargo flow.",
            "Your funds are used to clear imported goods held at customs, covering duties and logistics.",
            "Profit is made from the successful clearance and subsequent sale or distribution of these valuable goods.",
            "Returns from the expedited trade are shared among all investors, connecting you to global commerce."
        ]
    }
};

const mockPlans = {
    'New': [
        { id: 101, name: 'Iphone 17', price: 480, dailyIncome: 75, durationDays: 10, totalReturn: 750, saleStartTime: '2025-09-14T20:00:00', imageUrl: product_101_Image },
        { id: 102, name: 'Iphone 17 Air', price: 650, dailyIncome: 90, durationDays: 12, totalReturn: 1080, saleStartTime: '2025-09-13T10:00:00', imageUrl: product_102_Image },
        { id: 103, name: 'Iphone 17 pro', price: 800, dailyIncome: 110, durationDays: 15, totalReturn: 1650, saleStartTime: '2025-09-19T15:30:00', imageUrl: product_103_Image },
        { id: 104, name: 'Iphone 17 pro max', price: 2500, dailyIncome: 330, durationDays: 15, totalReturn: 4950, saleStartTime: '2025-09-18T14:00:00', imageUrl: product_104_Image },
        { id: 105, name: 'All Iphone Models Combo', price: 5000, dailyIncome: 550, durationDays: 18, totalReturn: 9900, saleStartTime: '2025-09-15T09:00:00', imageUrl: product_105_Image },
    ],
    'Solar Energy': [
        { id: 201, name: 'Sun Harvest 100', price: 1500, dailyIncome: 180, durationDays: 20, totalReturn: 3600, imageUrl: product_201_Image },
        { id: 202, name: 'EcoGrid Builder', price: 2500, dailyIncome: 280, durationDays: 25, totalReturn: 7000, imageUrl: product_202_Image },
        { id: 203, name: 'Radiant Returns', price: 3500, dailyIncome: 380, durationDays: 30, totalReturn: 11400, imageUrl: product_203_Image },
        { id: 204, name: 'Photovoltaic Fund', price: 5000, dailyIncome: 520, durationDays: 35, totalReturn: 18200, imageUrl: product_204_Image },
        { id: 205, name: 'Green Power Max', price: 7500, dailyIncome: 780, durationDays: 40, totalReturn: 31200, imageUrl: product_205_Image },
    ],
    'Wind Mill': [
        { id: 301, name: 'AeroBlade Advantage', price: 10000, dailyIncome: 1100, durationDays: 45, totalReturn: 49500, imageUrl: product_301_Image },
        { id: 302, name: 'Zephyr Yield', price: 15000, dailyIncome: 1600, durationDays: 45, totalReturn: 72000, imageUrl: product_302_Image },
        { id: 303, name: 'Windfarm Wealth', price: 25000, dailyIncome: 2700, durationDays: 50, totalReturn: 135000, imageUrl: product_303_Image },
        { id: 304, name: 'Turbine Trust', price: 35000, dailyIncome: 3800, durationDays: 50, totalReturn: 190000, imageUrl: product_304_Image },
        { id: 305, name: 'Gale Force Fund', price: 45000, dailyIncome: 4900, durationDays: 55, totalReturn: 269500, imageUrl: product_305_Image },
    ],
    'Crypto Mining': [
        { id: 401, name: 'Hash Rate Pro', price: 50000, dailyIncome: 5500, durationDays: 60, totalReturn: 330000, imageUrl: product_401_Image },
        { id: 402, name: 'Block Reward Boost', price: 75000, dailyIncome: 8000, durationDays: 60, totalReturn: 480000, imageUrl: product_402_Image },
        { id: 403, name: 'Digital Fortune Miner', price: 100000, dailyIncome: 11000, durationDays: 60, totalReturn: 660000, imageUrl: product_403_Image },
        { id: 404, name: 'Blockchain Baron', price: 150000, dailyIncome: 17000, durationDays: 65, totalReturn: 1105000, imageUrl: product_404_Image },
        { id: 405, name: 'Satoshi\'s Secret', price: 200000, dailyIncome: 23000, durationDays: 70, totalReturn: 1610000, imageUrl: product_405_Image },
    ],
    'Seaport': [
        { id: 501, name: 'Cargo Clearance Basic', price: 800, dailyIncome: 100, durationDays: 10, totalReturn: 1000, saleStartTime: '2025-10-01T09:00:00', imageUrl: product_501_Image },
        { id: 502, name: 'Logistics Link Pro', price: 1500, dailyIncome: 180, durationDays: 15, totalReturn: 2700, imageUrl: product_502_Image },
        { id: 503, name: 'Customs Navigator', price: 2500, dailyIncome: 280, durationDays: 20, totalReturn: 5600, imageUrl: product_503_Image },
        { id: 504, name: 'Global Trade Accelerator', price: 4000, dailyIncome: 450, durationDays: 25, totalReturn: 11250, imageUrl: product_504_Image },
        { id: 505, name: 'Port Authority Platinum', price: 6000, dailyIncome: 650, durationDays: 30, totalReturn: 19500, imageUrl: product_505_Image },
    ]
};

const CountdownTimer = ({ targetDate }) => {
    const calculateTimeLeft = () => {
        const difference = +new Date(targetDate) - +new Date();
        let timeLeft = {};
        if (difference > 0) {
            timeLeft = {
                days: Math.floor(difference / (1000 * 60 * 60 * 24)),
                hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
                minutes: Math.floor((difference / 1000 / 60) % 60),
                seconds: Math.floor((difference / 1000) % 60)
            };
        }
        return timeLeft;
    };

    const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());

    useEffect(() => {
        const timer = setTimeout(() => {
            setTimeLeft(calculateTimeLeft());
        }, 1000);
        return () => clearTimeout(timer);
    });

    const timerComponents = Object.keys(timeLeft).map(interval => {
        if (!timeLeft[interval] && interval !== 'seconds' && timeLeft['days'] === 0) {
            return null;
        }
        return (
            <span key={interval} className="timer-segment">
                {String(timeLeft[interval]).padStart(2, '0')}
                <span className="timer-label">{interval[0]}</span>
            </span>
        );
    });

    return (
        <div className="countdown-timer">
            {timerComponents.length ? timerComponents : <span className="sale-live">Sale is Live!</span>}
        </div>
    );
};

const ResultModal = ({ result, onClose }) => {
    if (!result.show) return null;
    const isSuccess = result.success;
    const title = isSuccess ? "Congratulations!" : "Purchase Failed";
    const icon = isSuccess ? "✅" : "❌";

    return (
        <div className="purchase-result-modal-overlay">
            <div className={`purchase-result-modal ${isSuccess ? 'success' : 'error'}`}>
                <div className="modal-icon">{icon}</div>
                <h2>{title}</h2>
                <p>{result.message}</p>
                <button className="modal-close-btn" onClick={onClose}>
                    OK
                </button>
            </div>
        </div>
    );
};

// ✅ --- THIS LINE IS THE FIX ---
// Added onPurchaseComplete to the props list and removed onPlanPurchase
function ProductsAndPlans({ token, userBalance, onPurchaseComplete }) {
    const [activeCategory, setActiveCategory] = useState('New');
    const [loading, setLoading] = useState(false);
    const [confirmingPlanId, setConfirmingPlanId] = useState(null);
    const [resultModal, setResultModal] = useState({ show: false, success: false, message: '' });

    const handlePurchase = async (plan) => {
        setLoading(true);
        try {
            // We now send a clean, explicit object to the server.
            // This ensures the backend receives exactly what it needs.
            const purchasePayload = {
                id: plan.id,
                price: plan.price,
                name: plan.name,
                durationDays: plan.durationDays
            };
            
            await axios.post(
                `${API_BASE_URL}/api/purchase-plan`,
                purchasePayload, // Send the explicit payload
                { headers: { Authorization: `Bearer ${token}` } }
            );

            setResultModal({
                show: true,
                success: true,
                message: `You have successfully invested in ${plan.name}.`
            });
        } catch (error) {
            const errorMessage = error.response?.data?.error || 'An unknown error occurred.';
            setResultModal({
                show: true,
                success: false,
                message: errorMessage
            });
        } finally {
            setLoading(false);
            setConfirmingPlanId(null);
        }
    };
    
    const closeResultModalAndRefresh = () => {
        setResultModal({ show: false, success: false, message: '' });
        onPurchaseComplete();
    };

    const formatCurrency = (amount) => new Intl.NumberFormat("en-IN", { style: "currency", currency: "INR" }).format(amount);

    return (
        <div className="plans-page">
            <ResultModal result={resultModal} onClose={closeResultModalAndRefresh} />
            <div className="plans-header">
                <h1>Investment Products</h1>
                <div className="category-tabs">
                    {Object.keys(mockPlans).map(category => (
                        <button
                            key={category}
                            className={`category-tab ${activeCategory === category ? 'active' : ''}`}
                            onClick={() => setActiveCategory(category)}
                        >
                            {category}
                        </button>
                    ))}
                </div>
            </div>
            <div className="category-description-section">
                <h2>{categoryDescriptions[activeCategory].title}</h2>
                <ul>
                    {categoryDescriptions[activeCategory].points.map((point, index) => (
                        <li key={index}>{point}</li>
                    ))}
                </ul>
            </div>
            <div className="plans-grid">
                {mockPlans[activeCategory].map((plan) => {
                    const isPreSale = plan.saleStartTime && new Date(plan.saleStartTime) > new Date();
                    const canAfford = userBalance !== undefined && userBalance >= plan.price;
                    return (
                        <div key={plan.id} className="plan-card">
                            <div className="plan-image-container">
                                <img src={plan.imageUrl} alt={plan.name} className="plan-image" />
                                {isPreSale && <div className="presale-badge">Pre-Sale</div>}
                            </div>
                            <div className="plan-card-body">
                                <h3>{plan.name}</h3>
                                {isPreSale && (
                                    <div className="presale-info">
                                        <p>Sale Starts In:</p>
                                        <CountdownTimer targetDate={plan.saleStartTime} />
                                    </div>
                                )}
                                <p className="price">Price: {formatCurrency(plan.price)}</p>
                                <div className="plan-details">
                                    <div><span>Daily Income:</span><strong>{formatCurrency(plan.dailyIncome)}</strong></div>
                                    <div><span>Term:</span><strong>{plan.durationDays} Days</strong></div>
                                    <div><span>Total Return:</span><strong>{formatCurrency(plan.totalReturn)}</strong></div>
                                </div>
                                {confirmingPlanId !== plan.id ? (
                                    <button
                                        className={`purchase-button ${isPreSale ? 'presale' : ''} ${!canAfford ? 'disabled' : ''}`}
                                        onClick={() => setConfirmingPlanId(plan.id)}
                                        disabled={loading || !canAfford || isPreSale}
                                    >
                                        {isPreSale ? 'Coming Soon' : 'Invest Now'}
                                    </button>
                                ) : (
                                    <div className="confirmation-buttons">
                                        <button
                                            className="confirm-btn"
                                            onClick={() => handlePurchase(plan)}
                                            disabled={loading}
                                        >
                                            {loading ? 'Processing...' : 'Confirm'}
                                        </button>
                                        <button className="cancel-btn" onClick={() => setConfirmingPlanId(null)} disabled={loading}>Cancel</button>
                                    </div>
                                )}
                                {!canAfford && !isPreSale && <p className="insufficient-balance-message">Insufficient Recharge Balance</p>}
                            </div>
                        </div>
                    );
                })}
            </div>
        </div>
    );
}

export default ProductsAndPlans;
