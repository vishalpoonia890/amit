import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './ProductsAndPlans.css';

// --- Import ALL individual product images ---
import product_101_Image from '../assets/101.png';
import product_102_Image from '../assets/102.png';
import product_103_Image from '../assets/103.png';
import product_104_Image from '../assets/104.png';
import product_105_Image from '../assets/105.png';

import product_201_Image from '../assets/201.png';
import product_202_Image from '../assets/202.png';
import product_203_Image from '../assets/203.png';
import product_204_Image from '../assets/204.png';
import product_205_Image from '../assets/205.png';

import product_301_Image from '../assets/301.png';
import product_302_Image from '../assets/302.png';
import product_303_Image from '../assets/303.png';
import product_304_Image from '../assets/304.png';
import product_305_Image from '../assets/305.png';

import product_401_Image from '../assets/401.png';
import product_402_Image from '../assets/402.png';
import product_403_Image from '../assets/403.png';
import product_404_Image from '../assets/404.png';
import product_405_Image from '../assets/405.png';

import product_501_Image from '../assets/501.png';
import product_502_Image from '../assets/502.png';
import product_503_Image from '../assets/503.png';
import product_504_Image from '../assets/504.png';
import product_505_Image from '../assets/505.png';


const API_BASE_URL = 'https://investmentpro-nu7s.onrender.com';

const categoryData = {
    'New': {
        title: "Explore Our Latest Investment Opportunities!",
        points: [
            "You acquire a share in our newly launched, high-potential products.",
            "Your funds are invested in diverse, cutting-edge projects with rapid growth potential.",
            "Profits from these successful early-stage ventures are distributed among investors.",
            "Witness the power of innovation as your investment grows with emerging markets."
        ],
        stats: {
            investors: "500K+",
            currentInvestment: 2_50_00_000, // 2.5 Crores
            basePayout: 5_00_00_000 // 5 Crores
        }
    },
    'Solar Energy': {
        title: "Invest in a Brighter, Greener Future!",
        points: [
            "You purchase a plan, supporting the development of solar energy projects.",
            "Your money directly funds the installation and maintenance of solar farms.",
            "Profit is generated by selling the clean electricity produced by these panels to the grid.",
            "Returns are then redistributed among all investors, powering both your portfolio and the planet."
        ],
        stats: {
            investors: "1.2M+",
            currentInvestment: 15_75_00_000, // 15.75 Crores
            basePayout: 25_00_00_000 // 25 Crores
        }
    },
     'Wind Mill': {
        title: "Harness the Power of Wind for Your Portfolio!",
        points: [
            "You invest in our wind energy plans, contributing to sustainable power generation.",
            "Your capital is used to build and operate state-of-the-art wind turbine farms.",
            "Revenue is earned by selling the renewable energy generated by the windmills.",
            "Profits are shared with all investors, making your money work with the wind."
        ],
        stats: {
            investors: "800K+",
            currentInvestment: 11_20_00_000, // 11.2 Crores
            basePayout: 18_00_00_000 // 18 Crores
        }
    },
    'Crypto Mining': {
        title: "Mine Digital Gold with Confidence!",
        points: [
            "You acquire a mining plan, gaining access to our high-performance crypto mining operations.",
            "Your investment secures computational power (hash rate) in our advanced mining facilities.",
            "Profit is generated by successfully mining new cryptocurrencies and processing transactions.",
            "Returns from the mined digital assets are then redistributed among all investors."
        ],
        stats: {
            investors: "2.5M+",
            currentInvestment: 30_50_00_000, // 30.5 Crores
            basePayout: 50_00_00_000 // 50 Crores
        }
    },
    'Seaport': {
        title: "Unlock Value from International Trade & Logistics!",
        points: [
            "You invest in a Seaport clearance plan, helping facilitate international cargo flow.",
            "Your funds are used to clear imported goods held at customs, covering duties and logistics.",
            "Profit is made from the successful clearance and subsequent sale or distribution of these valuable goods.",
            "Returns from the expedited trade are shared among all investors, connecting you to global commerce."
        ],
        stats: {
            investors: "1M+",
            currentInvestment: 18_90_00_000, // 18.9 Crores
            basePayout: 32_00_00_000 // 32 Crores
        }
    }
};

const imageMap = {
    101: product_101_Image, 102: product_102_Image, 103: product_103_Image, 104: product_104_Image, 105: product_105_Image,
    201: product_201_Image, 202: product_202_Image, 203: product_203_Image, 204: product_204_Image, 205: product_205_Image,
    301: product_301_Image, 302: product_302_Image, 303: product_303_Image, 304: product_304_Image, 305: product_305_Image,
    401: product_401_Image, 402: product_402_Image, 403: product_403_Image, 404: product_404_Image, 405: product_405_Image,
    501: product_501_Image, 502: product_502_Image, 503: product_503_Image, 504: product_504_Image, 505: product_505_Image,
};

// --- Helper function to format large numbers into Crores and Lakhs ---
const formatLargeNumber = (num) => {
    if (num >= 10000000) {
        return `₹${(num / 10000000).toFixed(2)} Crore`;
    }
    if (num >= 100000) {
        return `₹${(num / 100000).toFixed(2)} Lakh`;
    }
    return `₹${num.toLocaleString('en-IN')}`;
};

// --- New component for displaying category statistics ---
const CategoryStats = ({ stats }) => {
    const [totalPayout, setTotalPayout] = useState(0);

    useEffect(() => {
        const calculatePayout = () => {
            const today = new Date();
            const dayOfMonth = today.getDate();
            const basePayout = stats.basePayout || 10_00_00_000;
            const dailyIncrease = Math.floor(Math.random() * (1_00_00_000 - 50_00_000 + 1)) + 50_00_000;
            const calculatedPayout = basePayout + (dayOfMonth - 1) * dailyIncrease;
            setTotalPayout(calculatedPayout);
        };
        calculatePayout();
    }, [stats]);

    return (
        <div className="category-stats-card">
            <div className="stat-item">
                <span className="stat-label">Total Investors</span>
                <span className="stat-value">{stats.investors}</span>
            </div>
            <div className="stat-item">
                <span className="stat-label">Current Investment</span>
                <span className="stat-value">{formatLargeNumber(stats.currentInvestment)}</span>
            </div>
            <div className="stat-item">
                <span className="stat-label">Total Payouts (This Month)</span>
                <span className="stat-value">{formatLargeNumber(totalPayout)}</span>
            </div>
        </div>
    );
};

const ResultModal = ({ result, onClose }) => {
    if (!result.show) return null;
    const isSuccess = result.success;
    const title = isSuccess ? "Congratulations!" : "Purchase Failed";
    const icon = isSuccess ? "✅" : "❌";

    return (
        <div className="purchase-result-modal-overlay">
            <div className={`purchase-result-modal ${isSuccess ? 'success' : 'error'}`}>
                <div className="modal-icon">{icon}</div>
                <h2>{title}</h2>
                <p>{result.message}</p>
                <button className="modal-close-btn" onClick={onClose}>OK</button>
            </div>
        </div>
    );
};


function ProductsAndPlans({ token, userBalance, onPurchaseComplete, allPlans = [], loading: plansLoading }) {
    const [activeCategory, setActiveCategory] = useState('New');
    const [purchaseLoading, setPurchaseLoading] = useState(false);
    const [confirmingPlanId, setConfirmingPlanId] = useState(null);
    const [resultModal, setResultModal] = useState({ show: false, success: false, message: '' });

const handlePurchase = async (plan) => {
        setPurchaseLoading(true);
        try {
            // ✅ FIX: Changed 'plan.plan_name' to 'plan.name' to match the actual data object.
            const purchasePayload = { 
                id: plan.id, 
                price: plan.price, 
                name: plan.name, // This line is corrected
                durationDays: plan.duration_days 
            };
            
            await axios.post(`${API_BASE_URL}/api/purchase-plan`, purchasePayload, { headers: { Authorization: `Bearer ${token}` } });
            
            setResultModal({ show: true, success: true, message: `You have successfully invested in ${plan.name}.` });
        } catch (error) {
            console.error("Server responded with an error:", error.response?.data || error.message);
            setResultModal({ show: true, success: false, message: error.response?.data?.error || 'An unknown error occurred.' });
        } finally {
            setPurchaseLoading(false);
            setConfirmingPlanId(null);
        }
    };
    
    const closeResultModalAndRefresh = () => {
        setResultModal({ show: false, success: false, message: '' });
        onPurchaseComplete();
    };

    const formatCurrency = (amount) => new Intl.NumberFormat("en-IN", { style: "currency", currency: "INR" }).format(amount);

    const filteredPlans = allPlans.filter(plan => plan.category === activeCategory);

    return (
        <div className="plans-page">
            <ResultModal result={resultModal} onClose={closeResultModalAndRefresh} />

            <div className="plans-header">
                <h1>Investment Products</h1>
                <div className="category-tabs-container">
                    <div className="category-tabs">
                        {Object.keys(categoryData).map(category => (
                            <button
                                key={category}
                                className={`category-tab ${activeCategory === category ? 'active' : ''}`}
                                onClick={() => setActiveCategory(category)}
                            >
                                {category}
                            </button>
                        ))}
                    </div>
                </div>
            </div>

            <div className="category-description-section">
                <h2>{categoryData[activeCategory].title}</h2>
                <ul>
                    {categoryData[activeCategory].points.map((point, index) => (
                        <li key={index}>{point}</li>
                    ))}
                </ul>
            </div>
            
            {/* ✅ UPDATED: The product grid now appears before the statistics */}
            <div className="plans-grid">
                {plansLoading ? (
                    <p>Loading plans...</p>
                ) : (
                    filteredPlans.map((plan) => {
                        const canAfford = userBalance !== undefined && userBalance >= plan.price;
                        return (
                            <div key={plan.id} className="plan-card">
                                <div className="plan-image-container">
                                    <img src={imageMap[plan.id] || product_101_Image} alt={plan.plan_name} className="plan-image" />
                                </div>
                                <div className="plan-card-body">
                                    <h3>{plan.plan_name}</h3>
                                    <p className="price">Price: {formatCurrency(plan.price)}</p>
                                    <div className="plan-details">
                                        <div><span>Daily Income:</span><strong>{formatCurrency(plan.daily_income)}</strong></div>
                                        <div><span>Term:</span><strong>{plan.duration_days} Days</strong></div>
                                        <div><span>Total Return:</span><strong>{formatCurrency(plan.total_return)}</strong></div>
                                    </div>
                                    {confirmingPlanId !== plan.id ? (
                                        <button
                                            className={`purchase-button ${!canAfford ? 'disabled' : ''}`}
                                            onClick={() => setConfirmingPlanId(plan.id)}
                                            disabled={purchaseLoading || !canAfford}
                                        >
                                            Invest Now
                                        </button>
                                    ) : (
                                        <div className="confirmation-buttons">
                                            <button className="confirm-btn" onClick={() => handlePurchase(plan)} disabled={purchaseLoading}>
                                                {purchaseLoading ? 'Processing...' : 'Confirm'}
                                            </button>
                                            <button className="cancel-btn" onClick={() => setConfirmingPlanId(null)} disabled={purchaseLoading}>Cancel</button>
                                        </div>
                                    )}
                                    {!canAfford && <p className="insufficient-balance-message">Insufficient Balance</p>}
                                </div>
                            </div>
                        );
                    })
                )}
            </div>

            {/* ✅ UPDATED: The statistics card is now at the bottom of the page */}
            <CategoryStats stats={categoryData[activeCategory].stats} />

        </div>
    );
}

export default ProductsAndPlans;

